#!/bin/bash

## to launch this script, depending on your desired setup, you must run
## sudo ./pipeline.sh <your_workspace_username> /home/<your_workspace_username>/<ssh_key> <cluster_type>
## where <cluster_type> can be equal to aio or cluster.
##
## Examples:
##
## aio - all in one, non-production, single server:
##   sudo ./pipeline.sh <your_workspace_username> /home/<your_workspace_username>/<ssh_key> aio
##
## cluster -  separated master and nodes, production style, multi-server:
##   sudo ./pipeline.sh <your_workspace_username> /home/<your_workspace_username>/<ssh_key> cluster


echo "*******************************************************************"
echo "*******************************************************************"
echo "*******************************************************************"
echo "             OPENSHIFT CLUSTER CONFIGURATION: $3"
echo "*******************************************************************"
echo "*******************************************************************"
echo "*******************************************************************"

######### Install dependencies #########
echo "Installing git"
sudo yum install git -y

echo "Installing httpd-tools"
sudo yum install httpd-tools -y

echo "Installing rsync"
sudo yum install rsync -y

echo "Installing sshpass"
sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/sshpass-1.06-2.el7.x86_64.rpm

echo "Installing pip"
sudo easy_install pip

echo "Installing Ansible"
sudo pip install ansible

echo "Installing passlib"
sudo pip install passlib

echo "Running Ansible playbook"
########################################

#### Inventory file static template ####
read -r -d '' inventory_template << EOF
# This file is auto generated by shell script, be careful when making changes to this file
[all:vars]
ansible_user=centos
ansible_private_key_file='{{ private_key_file }}'
ansible_become=yes


[masters]
okd.test.<<team-name>>.cloud openshift_schedulable=true # for multi node clusters, set schedulable=false


[etcd]
okd.test.<<team-name>>.cloud

[nodes]
okd.test.<<team-name>>.cloud openshift_node_group_name="node-config-master-infra"
okd-node.test.<<team-name>>.cloud openshift_node_group_name="node-config-compute" openshift_schedulable=true

[OSEv3:children]
masters
nodes
etcd

[registry-access] # add below all hostnames of servers that will access the Docker registry
sync.tools.<<team-name>>.cloud

###### INSTALLATION PARAMETERS - BE CAREFUL IF EDITING BELOW

[OSEv3:vars]
openshift_deployment_type=origin
openshift_release="3.11"
openshift_hosted_manage_router=true

openshift_disable_check=disk_availability,docker_storage,memory_availability,docker_image_availability
osm_use_cockpit=true

# Configure custom ca certificate
openshift_master_ca_certificate={'certfile': '/tmp/okd_ca_cert.crt', 'keyfile': '/tmp/okd_ca_key.key'}

# Debug level for all OpenShift components (Defaults to 2)
debug_level=2

# default subdomain to use for exposed routes, you should have wildcard dns
# for *.apps.test.example.com that points at your infra nodes which will run
# your router
openshift_master_default_subdomain=apps.okd.test.<<team-name>>.cloud

#Set cluster_hostname to point at your load balancer
openshift_master_cluster_hostname=okd.test.<<team-name>>.cloud

openshift_public_hostname=console.okd.test.<<team-name>>.cloud

# htpasswd auth
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider'}]
openshift_master_htpasswd_file='/etc/origin/master/htpasswd'
openshift_master_htpasswd_users={'admin': '$apr1$rxeHqcZv$dEreXx3EQY6bLlvus5oFP0'}

# Configure master API and console ports.
openshift_master_api_port=8443
openshift_master_console_port=8443

# By default metrics are not automatically deployed, set this to enable them
openshift_metrics_install_metrics=true

# Configure the multi-tenant SDN plugin (default is 'redhat/openshift-ovs-subnet')
os_sdn_network_plugin_name='redhat/openshift-ovs-multitenant'

# Enable origin repos that point at Centos PAAS SIG, defaults to true, only used
# by openshift_deployment_type=origin
openshift_enable_origin_repo=true


EOF
# #######################################

if [ "$3" = "cluster" ] ; then

#### Prepare hosts
    ansible-playbook -i inventory_okd_cluster.txt --ask-vault-pass --extra-vars '@passwd.yml' -e "workspaceUser=$1 private_key_file=$2" pipeline_cluster_setup.yml

#### Pull down OKD ansible scripts. Note this is hardcoded as versions > OKD v3.11 are not supported by these scripts
    [ ! -d openshift-ansible ] && git clone https://github.com/openshift/openshift-ansible.git -b release-3.11 --depth=1

### Install prerequisites for OpenShift
    ansible-playbook -i  inventory_okd_cluster.txt -e "private_key_file=$2" openshift-ansible/playbooks/prerequisites.yml

### Install OpenShift
    ansible-playbook -i inventory_okd_cluster.txt -e "private_key_file=$2" openshift-ansible/playbooks/deploy_cluster.yml

### Post-installation tasks
    ansible-playbook -i inventory_okd_cluster.txt --ask-vault-pass --extra-vars '@passwd.yml' -e "workspaceUser=$1 private_key_file=$2" pipeline_cluster_postinstall.yml

fi

if [ "$3" = "aio" ] ; then

    ansible-playbook -i inventory.yml --ask-vault-pass --extra-vars '@passwd.yml' -e "workspaceUser=$1 private_key_file=$2" pipeline.yml

fi
